ctmc

const double lambda = 1.0;
const double mu = 1.0;

module distributed

disc_cluster1 : [0..4] init 0;
disc_cluster2 : [0..4] init 0;
disc_cluster3 : [0..4] init 0;
disc_cluster4 : [0..4] init 0;
disc_cluster5 : [0..4] init 0;
disc_cluster6 : [0..4] init 0;

disc_controllers1 : [0..2] init 0;
disc_controllers2 : [0..2] init 0;

processors : [0..2] init 0;

[cluster1_fail] disc_cluster1 < 4 -> ((4 - disc_cluster1) * lambda) : disc_cluster1 = disc_cluster1 + 1;  



endmodule
######################
module sixrxn

s1 : int init 1;
s2 : int init 50;
s3 : int  init 0;
s4 : int init 1;
s5 : int init 50;
s6 : int init 0;

[R1] s1>0 & s2>0 -> (k1*s1*s2) : (s3'=s3+1)&(s1'=s1-1)&(s2'=s2-1);
[R2] s3>0 -> (k2*s3)    : (s1'=s1+1)&(s2'=s2+1)&(s3'=s3-1);
[R3] s3>0 -> (k3*s3)    : (s1'=s1+1)&(s5'=s5+1)&(s3'=s3-1);
[R4] s4>0 & s5>0 -> (k4*s4*s5) : (s6'=s6+1)&(s4'=s4-1)&(s5'=s5-1);
[R5] s6>0 -> (k5*s6)    : (s4'=s4+1)&(s5'=s5+1)&(s6'=s6-1);
[R6] s6>0 -> (k6*s6)    : (s4'=s4+1)&(s2'=s2+1)&(s6'=s6-1);

endmodule
