// File generated by SBML-to-PRISM converter
// Original file: Circuit0xF6_000_110_abs_10_10.xml
// @GeneticLogicLab

ctmc

// Compartment size
const double Cell = 1.0;

// Model parameters
const double kd = 7.5E-4; // Degradation rate
const double kr_f = 0.5; // Forward repression binding rate
const double kr_r = 1.0; // Reverse repression binding rate
const double ka_f = 0.0033; // Forward activation binding rate
const double ka_r = 1.0; // Reverse activation binding rate
const double ko_f = 0.033; // Forward RNAP binding rate
const double ko_r = 1.0; // Reverse RNAP binding rate
const double kao_f = 1.0; // Forward activated RNAP binding rate
const double kao_r = 1.0; // Reverse activated RNAP binding rate
const double nc = 2.0; // Stoichiometry of binding
const double nr = 30.0; // Initial RNAP count
const double ko = 0.05; // Open complex production rate
const double kb = 1.0E-4; // Basal production rate
const double ng = 2.0; // Initial promoter count
const double np = 10.0; // Stoichiometry of production
const double ka = 0.25; // Activated production rate
const double kc_f = 0.05; // Forward complex formation rate
const double kc_r = 1.0; // Reverse complex formation rate

// Species AmeR
module AmeR

  AmeR  :  int init 0;

		// Degradation_AmeR
		[Degradation_AmeR] AmeR > 9 -> (AmeR' = AmeR - 10);
		// Production_AmeRpart_fc
		[Production_AmeRpart_fc] AmeR >= 0 -> (AmeR' = AmeR + 10);

endmodule

// Species AmtR
module AmtR

  AmtR  :  int init 0;

		// Degradation_AmtR
		[Degradation_AmtR] AmtR > 9 -> (AmtR' = AmtR - 10);
		// Production_AmtRpart_fc
		[Production_AmtRpart_fc] AmtR >= 0 -> (AmtR' = AmtR + 10);

endmodule

// Species AraAraC
module AraAraC

  AraAraC  :  int init 30;


endmodule

// Species BetI
module BetI

  BetI  :  int init 0;

		// Degradation_BetI
		[Degradation_BetI] BetI > 9 -> (BetI' = BetI - 10);
		// Production_pHlyIIR
		[Production_pHlyIIR] BetI >= 0 -> (BetI' = BetI + 10);
		// Production_pAmeR
		[Production_pAmeR] BetI >= 0 -> (BetI' = BetI + 10);

endmodule

// Species LacI
module LacI

  LacI  :  int init 0;

		// Production_LacIsensor_fc
		//[Production_LacIsensor_fc] LacI >= 0 -> (LacI' = LacI + 10);

endmodule

// Species PhIF
module PhIF

  PhIF  :  int init 0;

		// Degradation_PhIF
		[Degradation_PhIF] PhIF > 9 -> (PhIF' = PhIF - 10);
		// Production_pSrpR
		[Production_pSrpR] PhIF >= 0 -> (PhIF' = PhIF + 10);
		// Production_pBetI
		[Production_pBetI] PhIF >= 0 -> (PhIF' = PhIF + 10);

endmodule

// Species SrpR
module SrpR

  SrpR  :  int init 0;

		// Degradation_SrpR
		[Degradation_SrpR] SrpR > 9 -> (SrpR' = SrpR - 10);
		// Production_pTet
		[Production_pTet] SrpR >= 0 -> (SrpR' = SrpR + 10);
		// Production_pTac
		[Production_pTac] SrpR >= 0 -> (SrpR' = SrpR + 10);

endmodule

// Species TetR
module TetR

  TetR  :  int init 0;

		// Production_TetRsensor_fc
		//[Production_TetRsensor_fc] TetR >= 0 -> (TetR' = TetR + 10);

endmodule

// Species YFP
module YFP

  YFP  :  int init 0;

		// Degradation_YFP
		[Degradation_YFP] YFP > 9 -> (YFP' = YFP - 10);
		// Production_pAmtR
		[Production_pAmtR] YFP >= 0 -> (YFP' = YFP + 10);
		// Production_pPhlF
		[Production_pPhlF] YFP >= 0 -> (YFP' = YFP + 10);

endmodule

// Species HlyIIR
module HlyIIR

  HlyIIR  :  int init 0;

		// Degradation_HlyIIR
		[Degradation_HlyIIR] HlyIIR > 9 -> (HlyIIR' = HlyIIR - 10);
		// Production_HIyIIRpart_fc
		[Production_HIyIIRpart_fc] HlyIIR >= 0 -> (HlyIIR' = HlyIIR + 10);

endmodule

// Species AmeRpart_fc
module AmeRpart_fc

  AmeRpart_fc  :  int init 2;


endmodule

// Species AmtRpart_fc
module AmtRpart_fc

  AmtRpart_fc  :  int init 2;


endmodule

// Species pHlyIIR
module pHlyIIR

  pHlyIIR  :  int init 2;


endmodule

// Species pAmeR
module pAmeR

  pAmeR  :  int init 2;


endmodule

// Species HIyIIRpart_fc
module HIyIIRpart_fc

  HIyIIRpart_fc  :  int init 2;


endmodule

// Species LacIsensor_fc
module LacIsensor_fc

  LacIsensor_fc  :  int init 2;


endmodule

// Species pSrpR
module pSrpR

  pSrpR  :  int init 2;


endmodule

// Species pBetI
module pBetI

  pBetI  :  int init 2;


endmodule

// Species pTet
module pTet

  pTet  :  int init 2;


endmodule

// Species pTac
module pTac

  pTac  :  int init 2;


endmodule

// Species TetRsensor_fc
module TetRsensor_fc

  TetRsensor_fc  :  int init 2;


endmodule

// Species pAmtR
module pAmtR

  pAmtR  :  int init 2;


endmodule

// Species pPhlF
module pPhlF

  pPhlF  :  int init 2;


endmodule

// Reaction rates
module reaction_rates

		// Degradation_AmeR: 10 AmeR -> 
		[Degradation_AmeR] (kd * AmeR) > 0 -> (kd * AmeR) : true;

		// Degradation_AmtR: 10 AmtR -> 
		[Degradation_AmtR] (kd * AmtR) > 0 -> (kd * AmtR) : true;

		// Degradation_BetI: 10 BetI -> 
		[Degradation_BetI] (kd * BetI) > 0 -> (kd * BetI) : true;

		// Degradation_HlyIIR: 10 HlyIIR -> 
		[Degradation_HlyIIR] (kd * HlyIIR) > 0 -> (kd * HlyIIR) : true;

		// Degradation_PhIF: 10 PhIF -> 
		[Degradation_PhIF] (kd * PhIF) > 0 -> (kd * PhIF) : true;

		// Degradation_SrpR: 10 SrpR -> 
		[Degradation_SrpR] (kd * SrpR) > 0 -> (kd * SrpR) : true;

		// Degradation_YFP: 10 YFP -> 
		[Degradation_YFP] (kd * YFP) > 0 -> (kd * YFP) : true;

		// Production_AmeRpart_fc:  -> 10 AmeR
		[Production_AmeRpart_fc] (((((AmeRpart_fc * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * TetR) , nc))) > 0 -> (((((AmeRpart_fc * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * TetR) , nc))) : true;

		// Production_AmtRpart_fc:  -> 10 AmtR
		[Production_AmtRpart_fc] ((AmtRpart_fc * ((((kb * ko_f) / ko_r) * nr) + ((((ka * kao_f) / kao_r) * nr) * pow(((ka_f / ka_r) * AraAraC) , nc)))) / ((1 + ((ko_f / ko_r) * nr)) + (((kao_f / kao_r) * nr) * pow(((ka_f / ka_r) * AraAraC) , nc)))) > 0 -> ((AmtRpart_fc * ((((kb * ko_f) / ko_r) * nr) + ((((ka * kao_f) / kao_r) * nr) * pow(((ka_f / ka_r) * AraAraC) , nc)))) / ((1 + ((ko_f / ko_r) * nr)) + (((kao_f / kao_r) * nr) * pow(((ka_f / ka_r) * AraAraC) , nc)))) : true;

		// Production_pHlyIIR:  -> 10 BetI
		[Production_pHlyIIR] (((((pHlyIIR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * HlyIIR) , nc))) > 0 -> (((((pHlyIIR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * HlyIIR) , nc))) : true;

		// Production_pAmeR:  -> 10 BetI
		[Production_pAmeR] (((((pAmeR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * AmeR) , nc))) > 0 -> (((((pAmeR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * AmeR) , nc))) : true;

		// Production_HIyIIRpart_fc:  -> 10 HlyIIR
		[Production_HIyIIRpart_fc] (((((HIyIIRpart_fc * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * LacI) , nc))) > 0 -> (((((HIyIIRpart_fc * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * LacI) , nc))) : true;

		// Production_LacIsensor_fc:  -> 10 LacI
		//[Production_LacIsensor_fc] (((((LacIsensor_fc * ko) * ko_f) / ko_r) * nr) / (1 + ((ko_f / ko_r) * nr))) > 0 -> (((((LacIsensor_fc * ko) * ko_f) / ko_r) * nr) / (1 + ((ko_f / ko_r) * nr))) : true;

		// Production_pSrpR:  -> 10 PhIF
		[Production_pSrpR] (((((pSrpR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * SrpR) , nc))) > 0 -> (((((pSrpR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * SrpR) , nc))) : true;

		// Production_pBetI:  -> 10 PhIF
		[Production_pBetI] (((((pBetI * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * BetI) , nc))) > 0 -> (((((pBetI * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * BetI) , nc))) : true;

		// Production_pTet:  -> 10 SrpR
		[Production_pTet] (((((pTet * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * LacI) , nc))) > 0 -> (((((pTet * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * LacI) , nc))) : true;

		// Production_pTac:  -> 10 SrpR
		[Production_pTac] (((((pTac * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * TetR) , nc))) > 0 -> (((((pTac * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * TetR) , nc))) : true;

		// Production_TetRsensor_fc:  -> 10 TetR
		//[Production_TetRsensor_fc] (((((TetRsensor_fc * ko) * ko_f) / ko_r) * nr) / (1 + ((ko_f / ko_r) * nr))) > 0 -> (((((TetRsensor_fc * ko) * ko_f) / ko_r) * nr) / (1 + ((ko_f / ko_r) * nr))) : true;

		// Production_pAmtR:  -> 10 YFP
		[Production_pAmtR] (((((pAmtR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * PhIF) , nc))) > 0 -> (((((pAmtR * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * PhIF) , nc))) : true;

		// Production_pPhlF:  -> 10 YFP
		[Production_pPhlF] ((((pPhlF * ko) * (ko_f / ko_r)) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * AmtR) , nc))) > 0 -> ((((pPhlF * ko) * (ko_f / ko_r)) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * AmtR) , nc))) : true;

endmodule

// Reward structures (one per species)
// Reward 1: AmeR
rewards "AmeR" true : AmeR; endrewards
// Reward 2: AmtR
rewards "AmtR" true : AmtR; endrewards
// Reward 3: AraAraC
rewards "AraAraC" true : AraAraC; endrewards
// Reward 4: BetI
rewards "BetI" true : BetI; endrewards
// Reward 5: LacI
rewards "LacI" true : LacI; endrewards
// Reward 6: PhIF
rewards "PhIF" true : PhIF; endrewards
// Reward 7: SrpR
rewards "SrpR" true : SrpR; endrewards
// Reward 8: TetR
rewards "TetR" true : TetR; endrewards
// Reward 9: YFP
rewards "YFP" true : YFP; endrewards
// Reward 10: HlyIIR
rewards "HlyIIR" true : HlyIIR; endrewards
// Reward 11: AmeRpart_fc
rewards "AmeRpart_fc" true : AmeRpart_fc; endrewards
// Reward 12: AmtRpart_fc
rewards "AmtRpart_fc" true : AmtRpart_fc; endrewards
// Reward 13: pHlyIIR
rewards "pHlyIIR" true : pHlyIIR; endrewards
// Reward 14: pAmeR
rewards "pAmeR" true : pAmeR; endrewards
// Reward 15: HIyIIRpart_fc
rewards "HIyIIRpart_fc" true : HIyIIRpart_fc; endrewards
// Reward 16: LacIsensor_fc
rewards "LacIsensor_fc" true : LacIsensor_fc; endrewards
// Reward 17: pSrpR
rewards "pSrpR" true : pSrpR; endrewards
// Reward 18: pBetI
rewards "pBetI" true : pBetI; endrewards
// Reward 19: pTet
rewards "pTet" true : pTet; endrewards
// Reward 20: pTac
rewards "pTac" true : pTac; endrewards
// Reward 21: TetRsensor_fc
rewards "TetRsensor_fc" true : TetRsensor_fc; endrewards
// Reward 22: pAmtR
rewards "pAmtR" true : pAmtR; endrewards
// Reward 23: pPhlF
rewards "pPhlF" true : pPhlF; endrewards
